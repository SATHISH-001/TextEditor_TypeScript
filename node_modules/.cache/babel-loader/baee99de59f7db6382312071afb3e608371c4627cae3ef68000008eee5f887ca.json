{"ast":null,"code":"// import React, { useEffect, useRef, useState } from \"react\";\n// import { EditorState, ContentState } from \"draft-js\";\n// import { Editor } from \"react-draft-wysiwyg\";\n// import \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\n// function uploadImageCallBack(file: File) {\n//   return new Promise((resolve, reject) => {\n//     const xhr = new XMLHttpRequest();\n//     xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\n//     xhr.setRequestHeader(\"Authorization\", \"Client-ID XXXXX\");\n//     const data = new FormData();\n//     data.append(\"image\", file);\n//     xhr.send(data);\n//     xhr.addEventListener(\"load\", () => {\n//       const response = JSON.parse(xhr.responseText);\n//       resolve(response);\n//     });\n//     xhr.addEventListener(\"error\", () => {\n//       const error = JSON.parse(xhr.responseText);\n//       reject(error);\n//     });\n//   });\n// }\n\n// interface EditorContainerProps {}\n\n// const EditorContainer: React.FC<EditorContainerProps> = () => {\n//   const [editorState, setEditorState] = useState(\n//     EditorState.createWithContent(ContentState.createFromText(\"abcde\"))\n//   );\n//   const [editMode, setEditMode] = useState(true);\n//   const editorRef = useRef<Editor>(null);\n\n//   const focus = () => {\n//     if (editorRef.current) {\n//       editorRef.current.focusEditor();\n//     }\n//   };\n\n//   useEffect(() => {\n//     console.log(\"edit Me\");\n//     if (editMode) {\n//       focus();\n//     }\n//   }, [editMode]);\n\n//   const toggleEditMode = () => {\n//     setEditMode(!editMode);\n//   };\n\n//   const onEditorStateChange = (newEditorState: EditorState) => {\n//     setEditorState(newEditorState);\n//   };\n\n//   return (\n//     <div className=\"editor\">\n//       <button onClick={toggleEditMode}>Toggle Edit Mode</button>\n//       <Editor\n//         editorState={editorState}\n//         onEditorStateChange={onEditorStateChange}\n//         ref={editorRef}\n//         readOnly={!editMode}\n//         toolbar={{\n//           image: {\n//             uploadCallback: uploadImageCallBack,\n//             alt: { present: true, mandatory: true }\n//           }\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// const App: React.FC = () => (\n//   <div>\n//     <h2>Test with React Draft Wysiwyg.</h2>\n//     <EditorContainer />\n//   </div>\n// );\n\n// export default App;\n\n// import React, { Component } from \"react\";\n// import { render } from \"react-dom\";\n// import { EditorState, ContentState } from \"draft-js\";\n// import { Editor } from \"react-draft-wysiwyg\";\n// import \"../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n// // examples in https://github.com/jpuri/react-draft-wysiwyg/tree/master/stories\n// function uploadImageCallBack(file: File) {\n//   return new Promise((resolve, reject) => {\n//     const xhr = new XMLHttpRequest();\n//     xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\n//     xhr.setRequestHeader(\"Authorization\", \"Client-ID XXXXX\");\n//     const data = new FormData();\n//     data.append(\"image\", file);\n//     xhr.send(data);\n//     xhr.addEventListener(\"load\", () => {\n//       const response = JSON.parse(xhr.responseText);\n//       resolve(response);\n//     });\n//     xhr.addEventListener(\"error\", () => {\n//       const error = JSON.parse(xhr.responseText);\n//       reject(error);\n//     });\n//   });\n// }\n\n// interface Props {}\n\n// interface State {\n//   editorState: EditorState;\n//   editMode: boolean;\n// }\n\n// class EditorContainer extends Component<Props, State> {\n//   private editorRef: React.RefObject<Editor>;\n//   constructor(props: any) {\n//     super(props);\n//     this.state = {\n//       editorState: EditorState.createWithContent(\n//         ContentState.createFromText(\"abcde\")\n//       ),\n//       editMode: true\n//     };\n//     this.editorRef = React.createRef<Editor>();\n//   }\n\n//   focus = () => {\n//     let editor = this.editorRef.current;\n//     if (editor) {\n//       editor.focusEditor();\n//     }\n//   };\n\n//   componentDidMount = () => {\n//     console.log(\"edit Me\");\n//     if (this.state.editMode) {\n//       this.focus();\n//     }\n//   };\n\n//   toggleEditMode = () => {\n//     this.setState({ editMode: !this.state.editMode });\n//   };\n\n//   onEditorStateChange = (editorState: EditorState) => {\n//     // console.log(editorState)\n//     this.setState({\n//       editorState\n//     });\n//   };\n\n//   render() {\n//     const { editorState, editMode } = this.state;\n//     return (\n//       <div className=\"editor\">\n//         <button onClick={this.toggleEditMode}>Toggle Edit Mode</button>\n//         <Editor\n//           editorState={editorState}\n//           onEditorStateChange={this.onEditorStateChange}\n//           ref={this.editorRef}\n//           readOnly={!editMode}\n//           // toolbarHidden={true}\n//           toolbar={{\n//             // inline: { inDropdown: true },\n//             // list: { inDropdown: true },\n//             // textAlign: { inDropdown: true },\n//             // link: { inDropdown: true },\n//             // history: { inDropdown: true },\n//             image: {\n//               uploadCallback: uploadImageCallBack,\n//               alt: { present: true, mandatory: true }\n//             }\n//           }}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// const App = () => (\n//   <div>\n//     <h2>Test with React Draft Wysiwyg.</h2>\n//     <EditorContainer />\n//   </div>\n// );\n\n// export default App;","map":{"version":3,"names":[],"sources":["/home/sathish/my-app-typescript/src/App.tsx"],"sourcesContent":["// import React, { useEffect, useRef, useState } from \"react\";\n// import { EditorState, ContentState } from \"draft-js\";\n// import { Editor } from \"react-draft-wysiwyg\";\n// import \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\n// function uploadImageCallBack(file: File) {\n//   return new Promise((resolve, reject) => {\n//     const xhr = new XMLHttpRequest();\n//     xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\n//     xhr.setRequestHeader(\"Authorization\", \"Client-ID XXXXX\");\n//     const data = new FormData();\n//     data.append(\"image\", file);\n//     xhr.send(data);\n//     xhr.addEventListener(\"load\", () => {\n//       const response = JSON.parse(xhr.responseText);\n//       resolve(response);\n//     });\n//     xhr.addEventListener(\"error\", () => {\n//       const error = JSON.parse(xhr.responseText);\n//       reject(error);\n//     });\n//   });\n// }\n\n// interface EditorContainerProps {}\n\n// const EditorContainer: React.FC<EditorContainerProps> = () => {\n//   const [editorState, setEditorState] = useState(\n//     EditorState.createWithContent(ContentState.createFromText(\"abcde\"))\n//   );\n//   const [editMode, setEditMode] = useState(true);\n//   const editorRef = useRef<Editor>(null);\n\n//   const focus = () => {\n//     if (editorRef.current) {\n//       editorRef.current.focusEditor();\n//     }\n//   };\n\n//   useEffect(() => {\n//     console.log(\"edit Me\");\n//     if (editMode) {\n//       focus();\n//     }\n//   }, [editMode]);\n\n//   const toggleEditMode = () => {\n//     setEditMode(!editMode);\n//   };\n\n//   const onEditorStateChange = (newEditorState: EditorState) => {\n//     setEditorState(newEditorState);\n//   };\n\n//   return (\n//     <div className=\"editor\">\n//       <button onClick={toggleEditMode}>Toggle Edit Mode</button>\n//       <Editor\n//         editorState={editorState}\n//         onEditorStateChange={onEditorStateChange}\n//         ref={editorRef}\n//         readOnly={!editMode}\n//         toolbar={{\n//           image: {\n//             uploadCallback: uploadImageCallBack,\n//             alt: { present: true, mandatory: true }\n//           }\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// const App: React.FC = () => (\n//   <div>\n//     <h2>Test with React Draft Wysiwyg.</h2>\n//     <EditorContainer />\n//   </div>\n// );\n\n// export default App;\n\n\n// import React, { Component } from \"react\";\n// import { render } from \"react-dom\";\n// import { EditorState, ContentState } from \"draft-js\";\n// import { Editor } from \"react-draft-wysiwyg\";\n// import \"../node_modules/react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n// // examples in https://github.com/jpuri/react-draft-wysiwyg/tree/master/stories\n// function uploadImageCallBack(file: File) {\n//   return new Promise((resolve, reject) => {\n//     const xhr = new XMLHttpRequest();\n//     xhr.open(\"POST\", \"https://api.imgur.com/3/image\");\n//     xhr.setRequestHeader(\"Authorization\", \"Client-ID XXXXX\");\n//     const data = new FormData();\n//     data.append(\"image\", file);\n//     xhr.send(data);\n//     xhr.addEventListener(\"load\", () => {\n//       const response = JSON.parse(xhr.responseText);\n//       resolve(response);\n//     });\n//     xhr.addEventListener(\"error\", () => {\n//       const error = JSON.parse(xhr.responseText);\n//       reject(error);\n//     });\n//   });\n// }\n\n// interface Props {}\n\n// interface State {\n//   editorState: EditorState;\n//   editMode: boolean;\n// }\n\n// class EditorContainer extends Component<Props, State> {\n//   private editorRef: React.RefObject<Editor>;\n//   constructor(props: any) {\n//     super(props);\n//     this.state = {\n//       editorState: EditorState.createWithContent(\n//         ContentState.createFromText(\"abcde\")\n//       ),\n//       editMode: true\n//     };\n//     this.editorRef = React.createRef<Editor>();\n//   }\n\n//   focus = () => {\n//     let editor = this.editorRef.current;\n//     if (editor) {\n//       editor.focusEditor();\n//     }\n//   };\n\n//   componentDidMount = () => {\n//     console.log(\"edit Me\");\n//     if (this.state.editMode) {\n//       this.focus();\n//     }\n//   };\n\n//   toggleEditMode = () => {\n//     this.setState({ editMode: !this.state.editMode });\n//   };\n\n//   onEditorStateChange = (editorState: EditorState) => {\n//     // console.log(editorState)\n//     this.setState({\n//       editorState\n//     });\n//   };\n\n//   render() {\n//     const { editorState, editMode } = this.state;\n//     return (\n//       <div className=\"editor\">\n//         <button onClick={this.toggleEditMode}>Toggle Edit Mode</button>\n//         <Editor\n//           editorState={editorState}\n//           onEditorStateChange={this.onEditorStateChange}\n//           ref={this.editorRef}\n//           readOnly={!editMode}\n//           // toolbarHidden={true}\n//           toolbar={{\n//             // inline: { inDropdown: true },\n//             // list: { inDropdown: true },\n//             // textAlign: { inDropdown: true },\n//             // link: { inDropdown: true },\n//             // history: { inDropdown: true },\n//             image: {\n//               uploadCallback: uploadImageCallBack,\n//               alt: { present: true, mandatory: true }\n//             }\n//           }}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// const App = () => (\n//   <div>\n//     <h2>Test with React Draft Wysiwyg.</h2>\n//     <EditorContainer />\n//   </div>\n// );\n\n// export default App;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}